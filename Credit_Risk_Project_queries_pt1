The “application” table stores the loan applications. This includes:
●	The demographic of the loan applicants
●	The loan size or purposes
●	The applicant’s credit score
●	Is the loan applicant has a payment difficulties with the loan. 

# TASK 4: Deduce the loan duration

SELECT
	SK_ID_CURR,
	AMT_CREDIT,
	AMT_ANNUITY, 
	ROUND(AMT_CREDIT/AMT_ANNUITY, 1) * 12 AS "LOAN_DURATION (MONTHS)"
FROM application


# TASK 5 : Are there any factors in the application table affecting the Credit Scores?

# PRE-ANALYSIS:
# TO ANALYZE THE NUMBERS OF DATA FOR NORMALIZED CREDIT SCORE

SELECT 
	COUNT(EXT_SOURCE_1) AS "NUM_SOURCE_1",
	COUNT(EXT_SOURCE_2) AS "NUM_SOURCE_2",
	COUNT(EXT_SOURCE_3) AS "NUM_SOURCE_3"
FROM application

# TO CALCULATE THE NUMBER OF NULL VALUES IN EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3

SELECT
(SELECT COUNT(IFNULL(EXT_SOURCE_1, 'N/A')) FROM application where EXT_SOURCE_1 IS NULL) AS "NULL_SOURCE_1", 
(SELECT COUNT(IFNULL(EXT_SOURCE_2, 'N/A')) FROM application WHERE EXT_SOURCE_2 IS NULL) AS "NULL_SOURCE_2",
(SELECT COUNT(IFNULL(EXT_SOURCE_3, 'N/A')) FROM application WHERE EXT_SOURCE_3 IS NULL) AS "NULL_SOURCE_3"

# ANALYSIS:
# TO ANALYZE WHICH CODE_GENDER HAS BETTER NORMALIZED CREDIT SCORES

SELECT
	CODE_GENDER,
	ROUND(AVG(EXT_SOURCE_1),2) AS "AVG_EXT_SOURCE_1",
	ROUND(AVG(EXT_SOURCE_2),2) AS "AVG_EXT_SOURCE_2",
	ROUND(AVG(EXT_SOURCE_3),2) AS "AVG_EXT SOURCE_3"
FROM application
GROUP BY CODE_GENDER 

# TO ANALYZE IF THE AMT_INCOME_TOTAL HAS SIGNIFICANT EFFECTS ON NORMALIZED CREDIT SCORES  

SELECT                                  # the purpose of this query in to calculate the min, max and avg AMT_INCOME_TOTAL
	min(AMT_INCOME_TOTAL) AS 'MIN',       # so that we can divide those data in smaller groups with almost equivalent number of data for each group
	max(AMT_INCOME_TOTAL) AS 'MAX', 
	ROUND(avg(AMT_INCOME_TOTAL)) AS 'AVG'
FROM application
ORDER BY AMT_INCOME_TOTAL  

SELECT COUNT(AMT_INCOME_TOTAL) "NUM_OF_CLIENTS",
CASE
	WHEN AMT_INCOME_TOTAL <= 50000 THEN "LESS THAN 50K"
	WHEN AMT_INCOME_TOTAL > 50000 and AMT_INCOME_TOTAL <= 100000 THEN "50K TO 100K"
	WHEN AMT_INCOME_TOTAL > 100000 and AMT_INCOME_TOTAL <= 150000 THEN "100K TO 150K"
	WHEN AMT_INCOME_TOTAL > 150000 and AMT_INCOME_TOTAL <= 200000 THEN "150K TO 200K"
	WHEN AMT_INCOME_TOTAL > 200000 AND AMT_INCOME_TOTAL <= 250000 THEN "200K TO 250K"
	WHEN AMT_INCOME_TOTAL > 250000 AND AMT_INCOME_TOTAL <= 300000 THEN "250K TO 300K"
	WHEN AMT_INCOME_TOTAL > 300000 AND AMT_INCOME_TOTAL <= 350000 THEN "300K TO 350K"
	WHEN AMT_INCOME_TOTAL > 350000 AND AMT_INCOME_TOTAL <= 400000 THEN "350K TO 400K"
	WHEN AMT_INCOME_TOTAL > 400000 AND AMT_INCOME_TOTAL <= 450000 THEN "400K TO 450K"
	WHEN AMT_INCOME_TOTAL > 450000 AND AMT_INCOME_TOTAL <= 500000 THEN "450K TO 500K"
	WHEN AMT_INCOME_TOTAL > 500000 THEN "MORE THAN 500K"
END AS "INCOME_CLASS",
	ROUND(AVG(EXT_SOURCE_1),2) AS AVG_EXT_SOURCE_1,
	ROUND(AVG(EXT_SOURCE_2),2) AS AVG_EXT_SOURCE_2,
	ROUND(AVG(EXT_SOURCE_3),2) AS AVG_EXT_SOURCE_3
FROM application
GROUP BY INCOME_CLASS
ORDER BY AMT_INCOME_TOTAL 


# TO SEE THE NUM_OF_CLIENT AND THEIR FAMILY_STATUS INSIDE THE DATABASE 

SELECT NAME_FAMILY_STATUS,
	COUNT(NAME_FAMILY_STATUS) AS NUM_OF_CLIENT,
	ROUND(AVG(EXT_SOURCE_1),3) AS 'AVG_EXT_SOURCE_1',
	ROUND(AVG(EXT_SOURCE_2),3) AS 'AVG_EXT_SOURCE_2',
	ROUND(AVG(EXT_SOURCE_3),3) AS 'AVG_EXT_SOURCE_3'	
FROM application
GROUP BY NAME_FAMILY_STATUS


# TO ANALYZE IF THE AMT_CREDIT EFFECTS THE NORMALIZED CREDIT SCORE

SELECT min(AMT_CREDIT), max(AMT_CREDIT), ROUND(avg(AMT_CREDIT),3)
FROM application

SELECT COUNT(AMT_CREDIT) AS "NUM_OF_CLIENTS",
CASE 
	WHEN AMT_CREDIT <= 100000 THEN '100K AND BELOW'
	WHEN AMT_CREDIT > 100000 AND AMT_CREDIT <= 200000 THEN '100K TO 200K'
	WHEN AMT_CREDIT > 200000 AND AMT_CREDIT <= 300000 THEN '200K TO 300K'
	WHEN AMT_CREDIT > 300000 AND AMT_CREDIT <= 400000 THEN '300K TO 400K'
	WHEN AMT_CREDIT > 400000 AND AMT_CREDIT <= 500000 THEN '400K TO 500K'
	WHEN AMT_CREDIT > 500000 AND AMT_CREDIT <= 600000 THEN '500K TO 600K'
	WHEN AMT_CREDIT > 600000 AND AMT_CREDIT <= 700000 THEN '600K TO 700K'
	WHEN AMT_CREDIT > 700000 AND AMT_CREDIT <= 800000 THEN '700K TO 800K'
	WHEN AMT_CREDIT > 800000 AND AMT_CREDIT <= 900000 THEN '800K TO 900K'
	WHEN AMT_CREDIT > 900000 AND AMT_CREDIT <= 1000000 THEN '900K TO 1M'
	ELSE 'MORE THAN 1M'
END AS "AMT_CREDIT_CLASS",
ROUND(AVG(EXT_SOURCE_1),3) AS 'AVG_EXT_SOURCE_1',
ROUND(AVG(EXT_SOURCE_2),3) AS 'AVG_EXT_SPURCE_2',
ROUND(AVG(EXT_SOURCE_3),3) AS 'AVG_EXT_SOURCE_3'
FROM application
GROUP BY AMT_CREDIT_CLASS
ORDER BY AMT_CREDIT_CLASS


# TO ANALYZE IF OWNING CARS AND REALTY HAS EFFECT ON NORMALIZED CREDIT SCORES

SELECT 
	SUM(
	CASE 
		WHEN FLAG_OWN_CAR = 'Y' THEN 1
		ELSE 0
	END) AS "CLIENTS_WITH_CAR",
	SUM(
	CASE
		WHEN FLAG_OWN_REALTY = 'Y' THEN 1
		ELSE 0
	END)  AS "CLIENTS_WITH_REALTY"
FROM application

SELECT 
	FLAG_OWN_CAR,
	ROUND(AVG(EXT_SOURCE_1),3) AS AVG_EXT_SOURCE_1,
	ROUND(AVG(EXT_SOURCE_2),3) AS AVG_EXT_SOURCE_2,
	ROUND(AVG(EXT_SOURCE_3),3) AS AVG_EXT_SOURCE_3
FROM application
GROUP BY FLAG_OWN_CAR

SELECT 
	FLAG_OWN_REALTY,
	ROUND(AVG(EXT_SOURCE_1),3) AS AVG_EXT_SOURCE_1,
	ROUND(AVG(EXT_SOURCE_2),3) AS AVG_EXT_SORUCE_2,
	ROUND(AVG(EXT_SOURCE_3),3) AS AVG_EXT_SOURCE_3	
FROM application
GROUP BY FLAG_OWN_REALTY 


# TO ANALYZE IF THE CNT_CHILDREN AFFECT THE CREDIT SCORES

SELECT
CASE 
	WHEN CNT_CHILDREN = 1 THEN '1 CHILD'
	WHEN CNT_CHILDREN = 2 THEN '2 CHILDREN'
	WHEN CNT_CHILDREN > 2 AND CNT_CHILDREN <= 5 THEN '3-5 CHILDREN'
	WHEN CNT_CHILDREN > 5 AND CNT_CHILDREN <= 10 THEN '6-10 CHILDREN'
	WHEN CNT_CHILDREN > 10 THEN 'MORE THAN 10 CHILDREN'
END AS "NUM_OF_CHILDREN",
	COUNT(CNT_CHILDREN) AS "NUM_OF_CLIENTS",
	ROUND(AVG(EXT_SOURCE_1),2) AS AVG_EXT_SOURCE_1,
	ROUND(AVG(EXT_SOURCE_2),2) AS AVG_EXT_SOURCE_2,
	ROUND(AVG(EXT_SOURCE_3),2) AS AVG_EXT_SOURCE_3	
FROM application
WHERE CNT_CHILDREN != 0
GROUP BY NUM_OF_CHILDREN 
ORDER BY NUM_OF_CHILDREN 


# TASK 6 : Are there any factors in the application table affecting the Credit Amount?

#PRE-ANALYSIS
# TO CALCULATE THE NUMBER OF ROWS IN  AMT_CREDIT COLUMN FROM APPLICATION TABLE

SELECT COUNT(AMT_CREDIT) AS "TOTAL_ROWS"
FROM application

# TO CALCULATE THE NUMBER OF ROWS IN AMT_CREDIT COLUMN FROM APPLICATION TABLE THAT HAS NULL VALUES

SELECT COUNT(IFNULL(AMT_CREDIT, 'N/A')) AS "TOTAL_NULL_VALUES"
FROM application
WHERE AMT_CREDIT IS NULL

# TO CALCULATE THE MIN, MAX, AVG OF AMT_CREDIT COLUMN 

SELECT 
	MIN(AMT_CREDIT) AS "MIN_CREDIT", 
	MAX(AMT_CREDIT) AS "MAX_CREDIT", 
	ROUND(AVG(AMT_CREDIT), 3) AS "AVG_CREDIT"
FROM application


# ANALYSIS
# TO DETERMINE IF THE CNT_CHILDREN HAS SIGNIFICANT AFFECT ON THE AMT_CREDIT
 
SELECT 
CASE
	WHEN CNT_CHILDREN = 0 THEN '0 CHILD/NO CHILD'
	WHEN CNT_CHILDREN = 1 THEN '1 CHILD'
	WHEN CNT_CHILDREN = 2 THEN '2 CHILDREN'
	WHEN CNT_CHILDREN > 2 AND CNT_CHILDREN <= 5 THEN '3-5 CHILDREN'
	WHEN CNT_CHILDREN > 5 AND CNT_CHILDREN <= 10 THEN '6-10 CHILDREN'
	WHEN CNT_CHILDREN > 10 THEN 'MORE THAN 10 CHILDREN'
END AS "NUM_OF_CHILDREN",
	ROUND(AVG(AMT_CREDIT)) AS "AVG_AMT_CREDIT",
	COUNT(CNT_CHILDREN) AS "NUM_OF_CLIENTS"
FROM application
GROUP BY NUM_OF_CHILDREN 
ORDER BY NUM_OF_CHILDREN 


# TO CALCULATE THE NUMBER OF CLIENTS WITH CARS OR REALTY

SELECT 
	SUM(
	CASE 
		WHEN FLAG_OWN_CAR = 'Y' THEN 1
		ELSE 0
	END) AS "CLIENTS_WITH_CAR",
	SUM(
	CASE
		WHEN FLAG_OWN_REALTY = 'Y' THEN 1
		ELSE 0
	END)  AS "CLIENTS_WITH_REALTY"
FROM application

# TO DETERMINE IF OWNING CARS OR REALTY HAS SIGNIFICANT AFFECT ON THE AMT_CREDIT

SELECT 
	FLAG_OWN_CAR,
	ROUND(AVG(AMT_CREDIT)) AS "CREDIT_AMOUNT"
FROM application
GROUP BY FLAG_OWN_CAR

SELECT 
	FLAG_OWN_REALTY,
	ROUND(AVG(AMT_CREDIT)) AS "CREDIT_AMOUNT"	
FROM application
GROUP BY FLAG_OWN_REALTY 

# TO DETERMINE IF THE NAME_HOUSING_TYPE AFFECTS THE AMT_CREDIT

SELECT 
	NAME_HOUSING_TYPE AS "HOUSING_TYPE",
	ROUND(AVG(AMT_CREDIT)) AS "AVG_AMT_CREDIT",
	COUNT(NAME_HOUSING_TYPE) AS "NUM_OF_CLIENTS"
FROM application
GROUP BY NAME_HOUSING_TYPE 
ORDER BY AVG_AMT_CREDIT

# TO DETERMINE IF THE AMT_GOODS_PRICE AFFECTS THE AMT_CREDIT

SELECT COUNT(AMT_GOODS_PRICE) # TO CALCULATE THE TOTAL ROWS OF DATA IN AMT_GOODS_PRICE COLUMNS
FROM application

SELECT
	COUNT(IFNULL(AMT_GOODS_PRICE, "N/A")) AS "TOTAL_NULL_VALUES"  # TO CALCULATE THE TOTAL ROWS WITH NULL VALUES
FROM application
WHERE AMT_GOODS_PRICE IS NULL

SELECT MIN(AMT_GOODS_PRICE) AS MIN_GOODS_PRICE, 
MAX(AMT_GOODS_PRICE) AS MAX_GOODS_PRICE, 
ROUND(AVG(AMT_GOODS_PRICE)) AS AVG_GOODS_PRICE
FROM application

SELECT COUNT(AMT_GOODS_PRICE) AS 'NUM_OF_CLIENTS',
CASE 
	WHEN AMT_GOODS_PRICE <= 50000 THEN "50K OR LESS"
	WHEN AMT_GOODS_PRICE > 50000 and AMT_INCOME_TOTAL <= 100000 THEN "50K TO 100K"
	WHEN AMT_GOODS_PRICE > 100000 and AMT_INCOME_TOTAL <= 150000 THEN "100K TO 150K"
	WHEN AMT_GOODS_PRICE > 150000 and AMT_INCOME_TOTAL <= 200000 THEN "150K TO 200K"
	WHEN AMT_GOODS_PRICE > 200000 AND AMT_INCOME_TOTAL <= 250000 THEN "200K TO 250K"
	WHEN AMT_GOODS_PRICE > 250000 AND AMT_INCOME_TOTAL <= 300000 THEN "250K TO 300K"
	WHEN AMT_GOODS_PRICE > 300000 AND AMT_INCOME_TOTAL <= 350000 THEN "300K TO 350K"
	WHEN AMT_GOODS_PRICE > 350000 AND AMT_INCOME_TOTAL <= 400000 THEN "350K TO 400K"
	WHEN AMT_GOODS_PRICE > 400000 AND AMT_INCOME_TOTAL <= 450000 THEN "400K TO 450K"
	WHEN AMT_GOODS_PRICE > 450000 AND AMT_INCOME_TOTAL <= 500000 THEN "450K TO 500K"
	WHEN AMT_GOODS_PRICE > 500000 THEN "MORE THAN 500K"
END AS 'GOODS_PRICE',
ROUND(AVG(AMT_CREDIT)) AS AVG_AMT_CREDIT
FROM application
GROUP BY GOODS_PRICE
ORDER BY AVG_AMT_CREDIT

# TO ANALYZE OF MARITAL STATUS AFFCTS THE CLIENTS' CREDIT AMOUNT

SELECT NAME_FAMILY_STATUS,
	COUNT(NAME_FAMILY_STATUS) AS NUM_OF_CLIENT,
	ROUND(AVG(AMT_CREDIT)) AS 'AVG_AMT_CREDIT'	
FROM application
WHERE NAME_FAMILY_STATUS != 'Unknown'
GROUP BY NAME_FAMILY_STATUS
ORDER BY AVG_AMT_CREDIT


















